{"version":3,"sources":["constants/Theme.js","components/addWordDialog.js","components/wordDisplayDialog.js","components/itemCard.js","constants/URL.js","components/toaster.js","components/header.js","pages/home.js","data/actions/DictionaryActions.js","data/reducers/Dictionary.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","light","dark","secondary","typography","fontFamily","useStyles","makeStyles","formControl","width","addButtonContainer","position","loadingBar","left","top","marginTop","marginLeft","AddWordDialog","props","classes","useState","enteredWord","setEnteredWord","formError","setFormError","errorMsg","setErrorMsg","handleClose","Dialog","fullWidth","maxWidth","open","isOpen","onClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","label","value","onChange","event","target","className","Typography","variant","component","color","style","paddingTop","paddingBottom","DialogActions","Button","onClick","disabled","isSubmiting","length","handleSubmit","CircularProgress","size","title","textTransform","infoContainer","padding","Transition","React","forwardRef","ref","Slide","direction","WordDisplayDialog","fullScreen","TransitionComponent","AppBar","appBar","Toolbar","toolbar","selectedWord","word","IconButton","edge","aria-label","information","map","item","index","pos","lexicalCategory","entries","etymologies","senses","sense","definitions","examples","ex","_in","text","toString","subsenses","subsense","_si","mainContainer","backgroundColor","borderTopRightRadius","borderTopLeftRadius","zIndex","addButton","bottom","right","card","cursor","ItemCard","data","Card","CardContent","BASE_URL","Alert","elevation","Toaster","Snackbar","autoHideDuration","severity","message","root","flexGrow","display","breakpoints","up","search","borderRadius","shape","fade","common","white","spacing","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","Header","noWrap","InputBase","placeholder","input","inputProps","Home","DATA","useSelector","state","dictionary","dispatch","useDispatch","searchValue","setSearchValue","addFormOpen","setAddFormOpen","wordDisplayOpen","setWordDisplayOpen","setSelectedWord","isListLoading","setListLoading","isFormSubmiting","setFormSubmiting","isToastOpen","setToastOpen","toastMessage","setToastMessage","setSeverity","useEffect","a","fetch","method","request","ok","json","response","error","Error","type","result","then","catch","DictionaryAction","Grid","container","justify","md","sm","xs","varient","align","_id","Fab","enteredValue","body","JSON","stringify","toLowerCase","headers","dict","initialState","totalItems","reducers","combineReducers","action","total","store","createStore","applyMiddleware","thunk","ReactDOM","render","ThemeProvider","Theme","document","getElementById"],"mappings":"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","file":"static/js/main.a8b8fe0c.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#5d1049\",\r\n            light: \"#9e7092\",\r\n            dark: \"#4e0d3a\"\r\n        },\r\n        secondary: {\r\n            main: \"#e93651\",\r\n            light: \"#f49ba8\",\r\n            dark: \"#e30425\"\r\n        }\r\n    },\r\n    typography: {\r\n        fontFamily: \"'Kumbh Sans', sans-serif\",\r\n    }\r\n});\r\n\r\nexport default theme","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { CircularProgress, TextField, Typography } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        width: \"100%\"\r\n    },\r\n    addButtonContainer: {\r\n        position: \"relative\"\r\n    },\r\n    loadingBar: {\r\n        position: \"absolute\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    }\r\n}));\r\n\r\n\r\nconst AddWordDialog = (props) => {\r\n\r\n    const classes = useStyles();\r\n    const [enteredWord, setEnteredWord] = useState(\"\");\r\n    const [formError, setFormError] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n    const handleClose = () => {\r\n        props.handleClose();\r\n        setEnteredWord(\"\");\r\n    }\r\n\r\n    const handleFormSubmit = () => {\r\n        if (enteredWord.length === 0) {\r\n            setFormError(true);\r\n            setErrorMsg(\"Please enter something to add !\");\r\n            return;\r\n        }\r\n        setFormError(false);\r\n        setErrorMsg(\"\");\r\n        props.handleSubmit(enteredWord);\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            fullWidth={true}\r\n            maxWidth={\"xs\"}\r\n            open={props.isOpen}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"max-width-dialog-title\"\r\n        >\r\n            <DialogTitle id=\"max-width-dialog-title\">Add to Dictionary</DialogTitle>\r\n            <DialogContent>\r\n                <TextField label=\"New Word\" value={enteredWord} onChange={(event) => setEnteredWord(event.target.value)} className={classes.formControl} />\r\n                {formError && <Typography variant=\"body2\" component=\"p\" color=\"secondary\" style={{\r\n                    paddingTop: 5,\r\n                    paddingBottom: 5\r\n                }}>{errorMsg}</Typography>}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    CANCEL\r\n                </Button>\r\n                <div className={classes.addButtonContainer}>\r\n                    <Button disabled={props.isSubmiting} onClick={handleFormSubmit} color=\"primary\">\r\n                        ADD\r\n                </Button>\r\n                    {props.isSubmiting && <CircularProgress size={24} className={classes.loadingBar} />}\r\n                </div>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default AddWordDialog","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        textTransform: \"capitalize\"\r\n    },\r\n    infoContainer: {\r\n        padding: 20,\r\n        marginTop: 20\r\n    }\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst WordDisplayDialog = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Dialog fullScreen open={props.open} onClose={props.handleClose} TransitionComponent={Transition}>\r\n                <AppBar className={classes.appBar} position=\"sticky\">\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <Typography variant=\"h5\" className={classes.title}>\r\n                            {props.selectedWord.word}\r\n                        </Typography>\r\n                        <IconButton style={{\r\n                            marginLeft: \"auto\"\r\n                        }} edge=\"end\" color=\"inherit\" onClick={props.handleClose} aria-label=\"close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {props.selectedWord.information.map((item, index) => <div className={classes.infoContainer} key={index.toString()}>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                        {item.lexicalCategory.id}\r\n                    </Typography>\r\n                    {item.entries[0].etymologies && <Typography className={classes.pos} color=\"textSecondary\">\r\n                        Origin: {item.entries[0].etymologies[0]}\r\n                    </Typography>}\r\n\r\n                    {item.entries[0].senses.map((sense, index) => <Typography key={index.toString()} style={{\r\n                        marginTop: 15\r\n                    }}>\r\n                        {sense.definitions[0]}\r\n                        {sense.examples && <ul style={{\r\n                            marginTop: 0,\r\n                            paddingTop: 0\r\n                        }}>{sense.examples.map((ex, _in) => <li key={_in.toString()}>{ex.text}</li>)}\r\n                        </ul>}\r\n                        {sense.subsenses && sense.subsenses.map((subsense, _si) => <Typography key={_si.toString()}>\r\n                            {subsense.definitions[0]}\r\n                            {subsense.examples && <ul style={{\r\n                                marginTop: 0,\r\n                                paddingTop: 0\r\n                            }}>{subsense.examples.map((ex, _in) => <li key={_in.toString()}>{ex.text}</li>)}\r\n                            </ul>}\r\n                        </Typography>)}\r\n                    </Typography>)}\r\n                </div>)}\r\n\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordDisplayDialog","import React from 'react';\r\nimport { Card, CardContent, makeStyles, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    mainContainer: {\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        borderTopRightRadius: 8,\r\n        borderTopLeftRadius: 8,\r\n        padding: 20,\r\n        marginTop: -5,\r\n        zIndex: 20,\r\n    },\r\n    addButton: {\r\n        position: \"fixed\",\r\n        bottom: 15,\r\n        right: 15,\r\n        zIndex: 30\r\n    },\r\n    title: {\r\n        textTransform: \"capitalize\"\r\n    },\r\n    card: {\r\n        cursor: \"pointer\",\r\n        marginTop: 20\r\n    },\r\n    information: {\r\n        marginTop: 8\r\n    }\r\n});\r\n\r\nconst ItemCard = (props) => {\r\n\r\n    const classes = useStyles();\r\n    const item = props.data;\r\n\r\n    return (\r\n        <Card className={classes.card} variant=\"outlined\" onClick={props.onClick}>\r\n            <CardContent>\r\n                <Typography variant=\"h5\" className={classes.title} component=\"h2\">\r\n                    {item.word}\r\n                </Typography>\r\n\r\n\r\n                {item.information.map((item) => <Typography key={item.lexicalCategory.id} variant=\"body2\" component=\"p\" className={classes.information}>\r\n                        [{item.lexicalCategory.id}] {item.entries[0].senses[0].definitions[0]}\r\n                    </Typography>)}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ItemCard","export const BASE_URL = 'https://vocabbackend.herokuapp.com/api/v1/';","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nconst Toaster = (props) => {\r\n    return (\r\n        <Snackbar open={props.open} autoHideDuration={6000} onClose={props.onClose}>\r\n            <Alert onClose={props.onClose} severity={props.severity}>\r\n                {props.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default Toaster;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        zIndex: 10\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: 'block',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '50%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n                width: '20ch',\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nconst Header = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h5\" noWrap>\r\n                        Vocab\r\n          </Typography>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon />\r\n                        </div>\r\n                        <InputBase\r\n                            placeholder=\"Search word\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            value={props.value}\r\n                            inputProps={{ 'aria-label': 'search' }}\r\n                            onChange={props.onChange}\r\n                        />\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CircularProgress, Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AddWordDialog from '../components/addWordDialog';\r\nimport WordDisplayDialog from '../components/wordDisplayDialog';\r\nimport ItemCard from '../components/itemCard';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport * as DictionaryAction from '../data/actions/DictionaryActions';\r\nimport Toaster from '../components/toaster';\r\nimport Header from '../components/header';\r\n\r\nconst useStyles = makeStyles({\r\n    mainContainer: {\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        borderTopRightRadius: 8,\r\n        borderTopLeftRadius: 8,\r\n        padding: 20,\r\n        marginTop: -5,\r\n        zIndex: 20,\r\n    },\r\n    addButton: {\r\n        position: \"fixed\",\r\n        bottom: 15,\r\n        right: 15,\r\n        zIndex: 30\r\n    },\r\n    card: {\r\n        cursor: \"pointer\",\r\n        marginTop: 20\r\n    }\r\n});\r\n\r\nconst Home = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const DATA = useSelector(state => state.dictionary);\r\n    const dispatch = useDispatch();\r\n\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n    const [addFormOpen, setAddFormOpen] = useState(false);\r\n    const [wordDisplayOpen, setWordDisplayOpen] = useState(false);\r\n    const [selectedWord, setSelectedWord] = useState({});\r\n    const [isListLoading, setListLoading] = useState(true);\r\n    const [isFormSubmiting, setFormSubmiting] = useState(false);\r\n\r\n    const [isToastOpen, setToastOpen] = useState(false);\r\n    const [toastMessage, setToastMessage] = useState(\"\");\r\n    const [severity, setSeverity] = useState(\"\");\r\n\r\n    const handleAddFormClose = () => {\r\n        setAddFormOpen(false);\r\n    }\r\n\r\n    const handleAddFormSubmit = (enteredValue) => {\r\n        setFormSubmiting(true);\r\n\r\n        dispatch(DictionaryAction.addDictionaryItem(enteredValue)).then((data) => {\r\n            setFormSubmiting(false);\r\n            setAddFormOpen(false);\r\n            setToastOpen(true);\r\n            setToastMessage(\"Word added successfully !\");\r\n            setSeverity(\"success\");\r\n        }).catch((error) => {\r\n            setFormSubmiting(false);\r\n            setToastOpen(true);\r\n            setToastMessage(error.message);\r\n            setSeverity(\"error\");\r\n        });\r\n    }\r\n\r\n    const handleWordDisplayClose = () => {\r\n        setSelectedWord('');\r\n        setWordDisplayOpen(false);\r\n    }\r\n\r\n    const handleToastClose = () => {\r\n        setToastOpen(false);\r\n    }\r\n\r\n    const handleSearch = (event) => {\r\n        const word = event.target.value;\r\n        setSearchValue(word);\r\n        setListLoading(true);\r\n        dispatch(DictionaryAction.searchWord(word)).then(() => {\r\n            setListLoading(false);\r\n        }).catch((error) => {\r\n            setListLoading(false);\r\n            setToastOpen(true);\r\n            setToastMessage(error.message);\r\n            setSeverity(\"error\");\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setListLoading(true);\r\n        dispatch(DictionaryAction.getAllItems()).then((data) => {\r\n            setListLoading(false);\r\n        }).catch((error) => {\r\n            setListLoading(false);\r\n            setToastOpen(true);\r\n            setToastMessage(error.message);\r\n            setSeverity(\"error\");\r\n        })\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            {/* Header File */}\r\n            <Header onChange={handleSearch} value={searchValue} />\r\n\r\n            {/* Main container for showing list of words */}\r\n            <div className={classes.mainContainer}>\r\n                {isListLoading &&\r\n                    <CircularProgress style={{\r\n                        marginLeft: \"47%\"\r\n                    }} />}\r\n\r\n                <Grid container justify=\"center\">\r\n                    <Grid item md={6} sm={12} xs={12}>\r\n                        {!isListLoading && DATA.dictionary.length === 0 && <Typography varient=\"body\" component=\"p\" color=\"secondary\" align=\"center\">\r\n                            No word found in dictionary !\r\n                            </Typography>}\r\n                        {!isListLoading && DATA.dictionary.length > 0 && DATA.dictionary.map((item) => <ItemCard key={item._id} data={item} onClick={() => {\r\n                            setSelectedWord(item);\r\n                            setWordDisplayOpen(true);\r\n                        }} />)}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n\r\n            {/* Floating Add Button */}\r\n            <Fab className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={() => setAddFormOpen(true)}>\r\n                <AddIcon />\r\n            </Fab>\r\n\r\n            {/* Add word form dialog */}\r\n            {addFormOpen && <AddWordDialog isOpen={addFormOpen} isSubmiting={isFormSubmiting} handleClose={handleAddFormClose} handleSubmit={handleAddFormSubmit} />}\r\n\r\n            {/* Display Word detail dialog */}\r\n            {wordDisplayOpen && <WordDisplayDialog open={wordDisplayOpen} handleClose={handleWordDisplayClose} selectedWord={selectedWord} />}\r\n\r\n            {/* Toast for showing different messages */}\r\n            {isToastOpen && <Toaster message={toastMessage} onClose={handleToastClose} open={isToastOpen} severity={severity} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","import { BASE_URL } from '../../constants/URL';\r\n\r\nexport const addDictionaryItem = (word) => {\r\n    return async dispatch => {\r\n        try {\r\n            const request = await fetch(`${BASE_URL}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    \"word\": word.toLowerCase()\r\n                }),\r\n                headers: {\r\n                    \"Content-Type\":\"application/json\"\r\n                }\r\n            });\r\n\r\n            if (request.ok) {\r\n                const response = await request.json();\r\n\r\n                if (response.error) {\r\n                    throw new Error(response.message);\r\n                } else {\r\n                    return dispatch({\r\n                        type: \"UPDATE_DATA\",\r\n                        result: response.dict\r\n                    });\r\n                }\r\n            } else {\r\n                const response = await request.json();\r\n                throw new Error(response.message);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(error.message);\r\n        }\r\n    }\r\n}\r\n\r\nexport const searchWord = (word) => {\r\n    return async dispatch => {\r\n        try {\r\n            const request = await fetch(`${BASE_URL}search?word=${word}`);\r\n\r\n            if (request.ok) {\r\n                const response = await request.json();\r\n\r\n                if (response.error) {\r\n                    throw new Error(response.message);\r\n                } else {\r\n                    return dispatch({\r\n                        type: \"ADD_DATA\",\r\n                        result: response.result\r\n                    });\r\n                }\r\n            } else {\r\n                const response = await request.text();\r\n                throw new Error(response);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(error.message);\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAllItems = () => {\r\n    return async dispatch => {\r\n        try {\r\n            const request = await fetch(`${BASE_URL}`, {\r\n                method: 'GET',\r\n            });\r\n\r\n            if (request.ok) {\r\n                const response = await request.json();\r\n\r\n                if (response.error) {\r\n                    throw new Error(response.message);\r\n                } else {\r\n                    return dispatch({\r\n                        type: \"ADD_DATA\",\r\n                        result: response.result\r\n                    });\r\n                }\r\n            } else {\r\n                const response = await request.text();\r\n                throw new Error(response);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(error.message);\r\n        }\r\n    }\r\n}","const initialState = {\r\n    totalItems: 0,\r\n    dictionary: []\r\n}\r\n\r\nexport const DictionaryReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_DATA\":\r\n            return { ...state, totalItems: action.totalItems, dictionary: action.result }\r\n\r\n        case \"UPDATE_DATA\":\r\n            const total = state.totalItems + action.totalItems;\r\n            const data = [...state.dictionary, action.result];\r\n            return { ...state, totalItems: total, dictionary: data }\r\n\r\n        default:\r\n            return { ...state }\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Theme from './constants/Theme';\nimport Home from './pages/home';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { DictionaryReducer } from './data/reducers/Dictionary';\nimport thunk from 'redux-thunk';\nimport './index.css';\n\nconst reducers = combineReducers({\n  dictionary: DictionaryReducer\n});\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <ThemeProvider theme={Theme}>\n        <Home />\n      </ThemeProvider>\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}